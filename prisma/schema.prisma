generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id              Int      @id @default(autoincrement())
    username        String   @unique
    email           String   @unique
    password        String
    profileImageUrl String?
    role            Role     @default(USER)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model BlogPost {
    id               Int            @id @default(autoincrement())
    title            String
    description      String         @db.VarChar(1400)
    readTime         Int
    published        Boolean        @default(false)
    content          Json
    author           BlogPostAuthor @relation(fields: [authorId], references: [id])
    authorId         Int
    portraitImageUrl String?
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt

    @@index([authorId])
}

model BlogPostAuthor {
    id        Int        @id @default(autoincrement())
    name      String
    bio       String     @default("") @db.VarChar(1400)
    website   String     @default("")
    posts     BlogPost[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

enum Role {
    USER
    ADMIN
}

model EUser {
    id                        Int                         @id @default(autoincrement())
    name                      String
    email                     String                      @unique
    password                  String?
    picture                   String?
    accountVerified           Boolean                     @default(false)
    createdAt                 DateTime                    @default(now())
    updatedAt                 DateTime                    @updatedAt
    EPasswordResetToken       EPasswordResetToken[]
    EAccountVerificationToken EAccountVerificationToken[]
    EPost                     EPost[]
    EApiKey                   EApiKey[]
}

model EApiKey {
    id        Int       @id @default(autoincrement())
    key       String    @unique
    name      String
    lastUsed  DateTime?
    createdAt DateTime  @default(now())
    user      EUser     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int

    @@index([userId])
}

model EPasswordResetToken {
    id        Int       @id @default(autoincrement())
    token     String    @unique
    createdAt DateTime  @default(now())
    resetAt   DateTime?

    user   EUser @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int

    @@index([userId])
}

model EAccountVerificationToken {
    id          Int       @id @default(autoincrement())
    token       String    @unique
    activatedAt DateTime?

    createdAt DateTime @default(now())
    user      EUser    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int

    @@index([userId])
}

model EPost {
    id            Int         @id @default(autoincrement())
    title         String?
    content       Json?
    wordCount     Int?
    coverImageUrl String?
    status        EPostStatus @default(DRAFT)
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt

    user   EUser @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int

    @@index([userId])
}

enum EPostStatus {
    DRAFT
    PUBLISHED
}
